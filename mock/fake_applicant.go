// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"drivinglicence"
	"sync"
)

type FakeApplicant struct {
	GetDOBStub        func() string
	getDOBMutex       sync.RWMutex
	getDOBArgsForCall []struct {
	}
	getDOBReturns struct {
		result1 string
	}
	getDOBReturnsOnCall map[int]struct {
		result1 string
	}
	GetInitialsStub        func() string
	getInitialsMutex       sync.RWMutex
	getInitialsArgsForCall []struct {
	}
	getInitialsReturns struct {
		result1 string
	}
	getInitialsReturnsOnCall map[int]struct {
		result1 string
	}
	HoldsLicenceStub        func() bool
	holdsLicenceMutex       sync.RWMutex
	holdsLicenceArgsForCall []struct {
	}
	holdsLicenceReturns struct {
		result1 bool
	}
	holdsLicenceReturnsOnCall map[int]struct {
		result1 bool
	}
	IsOver17Stub        func() bool
	isOver17Mutex       sync.RWMutex
	isOver17ArgsForCall []struct {
	}
	isOver17Returns struct {
		result1 bool
	}
	isOver17ReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeApplicant) GetDOB() string {
	fake.getDOBMutex.Lock()
	ret, specificReturn := fake.getDOBReturnsOnCall[len(fake.getDOBArgsForCall)]
	fake.getDOBArgsForCall = append(fake.getDOBArgsForCall, struct {
	}{})
	stub := fake.GetDOBStub
	fakeReturns := fake.getDOBReturns
	fake.recordInvocation("GetDOB", []interface{}{})
	fake.getDOBMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeApplicant) GetDOBCallCount() int {
	fake.getDOBMutex.RLock()
	defer fake.getDOBMutex.RUnlock()
	return len(fake.getDOBArgsForCall)
}

func (fake *FakeApplicant) GetDOBCalls(stub func() string) {
	fake.getDOBMutex.Lock()
	defer fake.getDOBMutex.Unlock()
	fake.GetDOBStub = stub
}

func (fake *FakeApplicant) GetDOBReturns(result1 string) {
	fake.getDOBMutex.Lock()
	defer fake.getDOBMutex.Unlock()
	fake.GetDOBStub = nil
	fake.getDOBReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeApplicant) GetDOBReturnsOnCall(i int, result1 string) {
	fake.getDOBMutex.Lock()
	defer fake.getDOBMutex.Unlock()
	fake.GetDOBStub = nil
	if fake.getDOBReturnsOnCall == nil {
		fake.getDOBReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getDOBReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeApplicant) GetInitials() string {
	fake.getInitialsMutex.Lock()
	ret, specificReturn := fake.getInitialsReturnsOnCall[len(fake.getInitialsArgsForCall)]
	fake.getInitialsArgsForCall = append(fake.getInitialsArgsForCall, struct {
	}{})
	stub := fake.GetInitialsStub
	fakeReturns := fake.getInitialsReturns
	fake.recordInvocation("GetInitials", []interface{}{})
	fake.getInitialsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeApplicant) GetInitialsCallCount() int {
	fake.getInitialsMutex.RLock()
	defer fake.getInitialsMutex.RUnlock()
	return len(fake.getInitialsArgsForCall)
}

func (fake *FakeApplicant) GetInitialsCalls(stub func() string) {
	fake.getInitialsMutex.Lock()
	defer fake.getInitialsMutex.Unlock()
	fake.GetInitialsStub = stub
}

func (fake *FakeApplicant) GetInitialsReturns(result1 string) {
	fake.getInitialsMutex.Lock()
	defer fake.getInitialsMutex.Unlock()
	fake.GetInitialsStub = nil
	fake.getInitialsReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeApplicant) GetInitialsReturnsOnCall(i int, result1 string) {
	fake.getInitialsMutex.Lock()
	defer fake.getInitialsMutex.Unlock()
	fake.GetInitialsStub = nil
	if fake.getInitialsReturnsOnCall == nil {
		fake.getInitialsReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getInitialsReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeApplicant) HoldsLicence() bool {
	fake.holdsLicenceMutex.Lock()
	ret, specificReturn := fake.holdsLicenceReturnsOnCall[len(fake.holdsLicenceArgsForCall)]
	fake.holdsLicenceArgsForCall = append(fake.holdsLicenceArgsForCall, struct {
	}{})
	stub := fake.HoldsLicenceStub
	fakeReturns := fake.holdsLicenceReturns
	fake.recordInvocation("HoldsLicence", []interface{}{})
	fake.holdsLicenceMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeApplicant) HoldsLicenceCallCount() int {
	fake.holdsLicenceMutex.RLock()
	defer fake.holdsLicenceMutex.RUnlock()
	return len(fake.holdsLicenceArgsForCall)
}

func (fake *FakeApplicant) HoldsLicenceCalls(stub func() bool) {
	fake.holdsLicenceMutex.Lock()
	defer fake.holdsLicenceMutex.Unlock()
	fake.HoldsLicenceStub = stub
}

func (fake *FakeApplicant) HoldsLicenceReturns(result1 bool) {
	fake.holdsLicenceMutex.Lock()
	defer fake.holdsLicenceMutex.Unlock()
	fake.HoldsLicenceStub = nil
	fake.holdsLicenceReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeApplicant) HoldsLicenceReturnsOnCall(i int, result1 bool) {
	fake.holdsLicenceMutex.Lock()
	defer fake.holdsLicenceMutex.Unlock()
	fake.HoldsLicenceStub = nil
	if fake.holdsLicenceReturnsOnCall == nil {
		fake.holdsLicenceReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.holdsLicenceReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeApplicant) IsOver17() bool {
	fake.isOver17Mutex.Lock()
	ret, specificReturn := fake.isOver17ReturnsOnCall[len(fake.isOver17ArgsForCall)]
	fake.isOver17ArgsForCall = append(fake.isOver17ArgsForCall, struct {
	}{})
	stub := fake.IsOver17Stub
	fakeReturns := fake.isOver17Returns
	fake.recordInvocation("IsOver17", []interface{}{})
	fake.isOver17Mutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeApplicant) IsOver17CallCount() int {
	fake.isOver17Mutex.RLock()
	defer fake.isOver17Mutex.RUnlock()
	return len(fake.isOver17ArgsForCall)
}

func (fake *FakeApplicant) IsOver17Calls(stub func() bool) {
	fake.isOver17Mutex.Lock()
	defer fake.isOver17Mutex.Unlock()
	fake.IsOver17Stub = stub
}

func (fake *FakeApplicant) IsOver17Returns(result1 bool) {
	fake.isOver17Mutex.Lock()
	defer fake.isOver17Mutex.Unlock()
	fake.IsOver17Stub = nil
	fake.isOver17Returns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeApplicant) IsOver17ReturnsOnCall(i int, result1 bool) {
	fake.isOver17Mutex.Lock()
	defer fake.isOver17Mutex.Unlock()
	fake.IsOver17Stub = nil
	if fake.isOver17ReturnsOnCall == nil {
		fake.isOver17ReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isOver17ReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeApplicant) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getDOBMutex.RLock()
	defer fake.getDOBMutex.RUnlock()
	fake.getInitialsMutex.RLock()
	defer fake.getInitialsMutex.RUnlock()
	fake.holdsLicenceMutex.RLock()
	defer fake.holdsLicenceMutex.RUnlock()
	fake.isOver17Mutex.RLock()
	defer fake.isOver17Mutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeApplicant) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ drivinglicence.Applicant = new(FakeApplicant)
