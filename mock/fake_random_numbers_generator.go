// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"drivinglicence"
	"sync"
)

type FakeRandomNumbersGenerator struct {
	GetRandomNumbersStub        func(int) string
	getRandomNumbersMutex       sync.RWMutex
	getRandomNumbersArgsForCall []struct {
		arg1 int
	}
	getRandomNumbersReturns struct {
		result1 string
	}
	getRandomNumbersReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRandomNumbersGenerator) GetRandomNumbers(arg1 int) string {
	fake.getRandomNumbersMutex.Lock()
	ret, specificReturn := fake.getRandomNumbersReturnsOnCall[len(fake.getRandomNumbersArgsForCall)]
	fake.getRandomNumbersArgsForCall = append(fake.getRandomNumbersArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.GetRandomNumbersStub
	fakeReturns := fake.getRandomNumbersReturns
	fake.recordInvocation("GetRandomNumbers", []interface{}{arg1})
	fake.getRandomNumbersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRandomNumbersGenerator) GetRandomNumbersCallCount() int {
	fake.getRandomNumbersMutex.RLock()
	defer fake.getRandomNumbersMutex.RUnlock()
	return len(fake.getRandomNumbersArgsForCall)
}

func (fake *FakeRandomNumbersGenerator) GetRandomNumbersCalls(stub func(int) string) {
	fake.getRandomNumbersMutex.Lock()
	defer fake.getRandomNumbersMutex.Unlock()
	fake.GetRandomNumbersStub = stub
}

func (fake *FakeRandomNumbersGenerator) GetRandomNumbersArgsForCall(i int) int {
	fake.getRandomNumbersMutex.RLock()
	defer fake.getRandomNumbersMutex.RUnlock()
	argsForCall := fake.getRandomNumbersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRandomNumbersGenerator) GetRandomNumbersReturns(result1 string) {
	fake.getRandomNumbersMutex.Lock()
	defer fake.getRandomNumbersMutex.Unlock()
	fake.GetRandomNumbersStub = nil
	fake.getRandomNumbersReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeRandomNumbersGenerator) GetRandomNumbersReturnsOnCall(i int, result1 string) {
	fake.getRandomNumbersMutex.Lock()
	defer fake.getRandomNumbersMutex.Unlock()
	fake.GetRandomNumbersStub = nil
	if fake.getRandomNumbersReturnsOnCall == nil {
		fake.getRandomNumbersReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getRandomNumbersReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeRandomNumbersGenerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getRandomNumbersMutex.RLock()
	defer fake.getRandomNumbersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRandomNumbersGenerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ drivinglicence.RandomNumbersGenerator = new(FakeRandomNumbersGenerator)
